%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h"
#include "absyn.h"
#include "y.tab.h"
#include "parse.h"

 /* function prototypes */
int yylex(void);

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}

A_exp absyn_root; // we "need" this, cause of extern declaration in parse.h

%}


%union {
	int pos;
	int ival;
	string sval;
	A_exp exp;
	A_var var;
	A_dec dec;
	A_decList decList;
	A_expList expList;
  // TODO: extend types (page 96 ;D)
};

%token <sval> ID STRING
%token <ival> INT

%type // extend types here
	<exp> expression arithmetic_expression expression_sequence
	program assignment type_declaration type

%type
		<expList> expression_list
		
%type 
	<var> lvalue

%type
	<decList> declaration_sequence
				
%type
	<dec> declaration

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%nonassoc DO OF
%nonassoc THEN /* ELSE must come after THEN! */
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%



program: expression {$$=absyn_root=$1;} // take off 

expression
        : INT			{$$=A_IntExp(EM_tokPos, $1);} // like page 98
        | STRING		{$$=A_StringExp(EM_tokPos,$1);}
        | BREAK			{$$=A_BreakExp(EM_tokPos);}
        | NIL			{$$=A_NilExp(EM_tokPos);}
        | lvalue		
        | assignment
        | selection
        | iteration
        | function_call
        | arithmetic_expression 
        | comparison
        | boolean_expression
        | MINUS expression %prec UMINUS
        | ID LBRACE field_assignments RBRACE
        | ID LBRACK expression RBRACK OF expression
        | LPAREN RPAREN {$$=A_NilExp(EM_tokPos);} 
        | LPAREN expression_sequence RPAREN {$$=$2;} // assign left to second element here, then parsing goes to line 172
        | LET declaration_sequence IN END {$$=A_LetExp(EM_tokPos, $2, A_NilExp(EM_tokPos));}
        | LET declaration_sequence IN expression_sequence END {$$=A_LetExp(EM_tokPos, $2, $4); }

lvalue
        : ID lvalue_extension 

lvalue_extension
        : /* empty */
        | DOT ID lvalue_extension
        | LBRACK expression RBRACK lvalue_extension

assignment
        : lvalue ASSIGN expression {$$=A_AssignExp(EM_tokPos, $1, $3);} // TODO: A_var should be set

function_call
        : ID LPAREN RPAREN
        | ID LPAREN expression_list RPAREN 

arithmetic_expression
        : expression PLUS expression	{$$=A_OpExp(EM_tokPos, A_plusOp,$1,$3);}
        | expression MINUS expression	{$$=A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
        | expression TIMES expression	{$$=A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
        | expression DIVIDE expression	{$$=A_OpExp(EM_tokPos, A_divideOp, $1, $3);}

comparison
        : expression EQ expression
        | expression NEQ expression
        | expression GT expression
        | expression LT expression 
        | expression GE expression 
        | expression LE expression 

boolean_expression
        : expression AND expression
        | expression OR expression

field_assignments
        : /* empty */
        | field_assignment_list

field_assignment_list
        : field_assignment
        | field_assignment_list COMMA field_assignment

field_assignment
        : ID EQ expression

declaration_sequence
        : /* empty */ //{$$=A_decList( A_NilExp(EM_tokPos), A_NilExp(EM_tokPos));}
        | declaration declaration_sequence {$$=A_DecList($1, $2);}

declaration
        : type_declaration
        | variable_declaration
        | function_declaration

type_declaration
        : TYPE ID EQ type 

type
        : ID
        | LBRACE type_fields RBRACE 
        | ARRAY OF ID

type_fields
        : /* empty */
        | type_field_list

type_field_list
        : ID COLON ID
        | type_field_list COMMA ID COLON ID

variable_declaration
        : VAR ID ASSIGN expression //{$$=A_VarDec(EM_tokPos, $2, $3)} // TODO: Typ bestimmen?!
        | VAR ID COLON ID ASSIGN expression

function_declaration
        : FUNCTION ID LPAREN type_fields RPAREN EQ expression
        | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expression

selection
        : IF expression THEN expression ELSE expression
        | IF expression THEN expression

iteration
        : WHILE expression DO expression
        | FOR ID ASSIGN expression TO expression DO expression

expression_sequence
        : expression 
        | expression_sequence SEMICOLON expression 

expression_list
        : expression {$$=A_ExpList($1, A_NilExp(EM_tokPos));}
        | expression_list COMMA expression {$$=A_ExpList($3, $1);}


/* ERROR RECOVERY RULES */

/*expression
        : LPAREN error RPAREN

expression_sequence
        : expression error;
*/
