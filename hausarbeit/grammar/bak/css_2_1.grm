
/*
*
* C programs
*
*/
%{
#include <stdio.h>
#include <string.h>
#include "css_types.h"
#include "y.tab.h"
//#include "parser.h"

css_RuleList root;
extern int yyparse(void);
extern int yydebug;

%}

/*
*
* Union of types
*
*/

%union{
	int pos;
    char* sval;
	css_Selector selector;
	css_Declaration declaration;
	css_SelectorList selectorList;
	css_DeclarationList declarationList;
	css_Rule rule;
	css_RuleList ruleList;
	char* prio;
}

/*
*
* Tokens
*
*/
%token <string> ANGLE EMS EXS NUMBER TIME STRING IDENT URI PERCENTAGE FREQ LENGTH S IMPORTANT_SYM

/*
*
* Types
*
*/

%type <ruleList> body rulesets program stylesheet
%type <rule> ruleset
%type <declarationList> declarations
%type <declaration> declaration
%type <selectorList> selectorlist
%type <selector> selector
%type <string> expr spaces term term_numeral prio operator combinator unary_operator property


// takeoff
%start program

%%
	
program: stylesheet {$$=root=$1;}

stylesheet 
    : body	{ $$ = $1; }
;

// *
body
    : rulesets {$$ = $1;}
//*
rulesets
    : ruleset { $$ = create_CSSRuleList($1, NULL); }
	| rulesets ruleset { $$ = create_CSSRuleList($2, $1);}


operator 
    : '/' spaces { $$ = strdup("/");}
    | ',' spaces { $$ = strdup(",");}

combinator 
    : '+' spaces
    {
		$$ = "+"; 
    }
    | '>' spaces
    {
		$$ = ">"; 
    }

unary_operator 
    : '-' { $$ = strdup("-");}
    | '+' { $$ = strdup("+");}

//*
ruleset 
    : selectorlist '{' spaces declarations '}' spaces { $$ = create_CSSRule($1, $4);}
    | selectorlist '{' spaces '}' spaces { $$ = create_CSSRule($1, NULL);}

//*
selectorlist
	: selector { $$ = create_CSSSelectorList($1, NULL); }
	| selectorlist ',' selector { $$ = create_CSSSelectorList($3, $1); }

// *
selector
	: STRING {$$ = create_CSSSelector($1);}

// * 
declarations
	: declaration { $$ = create_CSSDeclarationList($1, NULL); }
	| declarations ';' spaces declaration { $$ = create_CSSDeclarationList($4, $1); }
	| declarations ';' spaces { $$ = $1; } // TODO: check.

// * 
declaration 
	: property ':' spaces expr { $$ = create_CSSDeclaration($4);}

//*
property 
	: IDENT spaces { $$ = $1; }

//*
expr 
	: term { $$ = $1; }
	| expr operator term
	| expr term

prio // : IMPORTANT_SYM S* ;
	: IMPORTANT_SYM spaces { $$ = $1;}

//*
term 
	: unary_operator term_numeral spaces
	| term_numeral spaces { $$ = $1; }
	| STRING spaces { $$ = $1; }
	| IDENT spaces { $$ = $1; }
	| URI spaces { $$ = $1; }
	//| hexcolor

//*
term_numeral
    : NUMBER { $$ = $1; }
    | PERCENTAGE { $$ = $1; }
    | LENGTH { $$ = $1; }
    | EMS { $$ = $1; }
    | EXS { $$ = $1; }
    | ANGLE { $$ = $1; }
    | TIME { $$ = $1; }
    | FREQ { $$ = $1; }

spaces
    : spaces S
    | { $$ = NULL; }

%%

/* main for manual testing */
int main(int argc, char** argv)
{
    yydebug = 1;
    const char* usage = "usage: %s [infile] [outfile]\n";
    char* outfile;
    char* infile;
    extern FILE *yyin, *yyout;
    
    char* progname = argv[0];
	
	if(argc != 3)
	{
		fprintf(stderr, usage, progname);
        return -1;
	}
	//open infile
    yyin = fopen(argv[1], "r");	
	if(yyin == NULL)
	{
		fprintf(stderr, "%s: cannot open %s\n", progname, argv[1]);
		return -1;
	}
	
	// open outfile
	yyout = fopen(argv[2], "w");        
	if(yyout == NULL)
	{
		fprintf(stderr, "%s: cannot open %s\n", progname, argv[2]);
		return -1;
	}
    yyparse();
    if(root){
        fprintf(stdout, "ladida %s", root->rule->selectorList->selector->name);
    }
        
    return 0;
}

yyerror(char *s)
{
    //printf("%s\n", s);
}
